name: ci-tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
  
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Test of these containers
        container: ["ubuntu-dev:20", "alpine-dev:latest"]
        compiler: [{cxx: g++, c: gcc}]
        include:
          - container: "alpine-dev:latest"
            compiler: {cxx: clang++, c: clang}
    timeout-minutes: 90
    container:
      image: ghcr.io/romange/${{ matrix.container }}
    steps:
    - uses: actions/checkout@v3
    - name: Choose toolchain
      run: |
        if [ "${{matrix.compiler.c}}" = "clang" ]; then
          apk update && apk add clang
        fi
    - name: Cache build deps
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: |
          ~/.ccache
          ${{github.workspace}}/build/_deps
        key: ${{ runner.os }}-deps2-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-deps2-
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
          cmake -B ${{github.workspace}}/build \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -GNinja \
            -DCMAKE_C_COMPILER="${{matrix.compiler.c}}" \
            -DCMAKE_CXX_COMPILER="${{matrix.compiler.cxx}}" \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - name: Build & Test
      run: |
          cd ${{github.workspace}}/build
          uname -a
          ulimit -a
          cat /proc/cpuinfo
          ninja -k 5 base/all io/all strings/all util/all echo_server ping_iouring_server https_client_cli
          GLOG_logtostderr=1 gdb -batch -ex "run" -ex "thread apply all bt" \
             ./accept_server_test || true
          GLOG_logtostderr=1 GLOG_vmodule=proactor=1 ctest -V -L CI
          # ./proactor_test --gtest_filter=*Migrate --logtostderr --vmodule=proactor=2,uring_fiber_algo=1



